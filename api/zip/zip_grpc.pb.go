// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/zip/zip.proto

package start_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Zip_GenerateShortLink_FullMethodName = "/api.zip.zip/GenerateShortLink"
	Zip_GetLongLink_FullMethodName       = "/api.zip.zip/GetLongLink"
)

// ZipClient is the client API for Zip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZipClient interface {
	// Generate Short Link.
	//
	// ```
	// Example request:
	//
	//	longLink: www.vk.com/Asdfasdasdasdasdg?=
	//
	// ```
	//
	// ```
	// Example response:
	//
	//	shortLink:   www.vk.com/QWEDSA123A
	//
	// ```
	//
	// Specific codes:
	//   - codes.InvalidArgument
	GenerateShortLink(ctx context.Context, in *GenerateShortLinkRequest, opts ...grpc.CallOption) (*GenerateShortLinkResponse, error)
	// Get Link.
	//
	// ```
	// Example request:
	//
	//	shortLink: www.vk.com/QWEDSA123A
	//
	// ```
	//
	// ```
	// Example response:
	//
	//	longLink:   www.vk.com/Asdfasdasdasdasdg?=
	//
	// ```
	//
	// Specific codes:
	//   - codes.InvalidArgument
	GetLongLink(ctx context.Context, in *GetLongLinkRequest, opts ...grpc.CallOption) (*GetLongLinkResponse, error)
}

type zipClient struct {
	cc grpc.ClientConnInterface
}

func NewZipClient(cc grpc.ClientConnInterface) ZipClient {
	return &zipClient{cc}
}

func (c *zipClient) GenerateShortLink(ctx context.Context, in *GenerateShortLinkRequest, opts ...grpc.CallOption) (*GenerateShortLinkResponse, error) {
	out := new(GenerateShortLinkResponse)
	err := c.cc.Invoke(ctx, Zip_GenerateShortLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zipClient) GetLongLink(ctx context.Context, in *GetLongLinkRequest, opts ...grpc.CallOption) (*GetLongLinkResponse, error) {
	out := new(GetLongLinkResponse)
	err := c.cc.Invoke(ctx, Zip_GetLongLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZipServer is the server API for Zip service.
// All implementations should embed UnimplementedZipServer
// for forward compatibility
type ZipServer interface {
	// Generate Short Link.
	//
	// ```
	// Example request:
	//
	//	longLink: www.vk.com/Asdfasdasdasdasdg?=
	//
	// ```
	//
	// ```
	// Example response:
	//
	//	shortLink:   www.vk.com/QWEDSA123A
	//
	// ```
	//
	// Specific codes:
	//   - codes.InvalidArgument
	GenerateShortLink(context.Context, *GenerateShortLinkRequest) (*GenerateShortLinkResponse, error)
	// Get Link.
	//
	// ```
	// Example request:
	//
	//	shortLink: www.vk.com/QWEDSA123A
	//
	// ```
	//
	// ```
	// Example response:
	//
	//	longLink:   www.vk.com/Asdfasdasdasdasdg?=
	//
	// ```
	//
	// Specific codes:
	//   - codes.InvalidArgument
	GetLongLink(context.Context, *GetLongLinkRequest) (*GetLongLinkResponse, error)
}

// UnimplementedZipServer should be embedded to have forward compatible implementations.
type UnimplementedZipServer struct {
}

func (UnimplementedZipServer) GenerateShortLink(context.Context, *GenerateShortLinkRequest) (*GenerateShortLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateShortLink not implemented")
}
func (UnimplementedZipServer) GetLongLink(context.Context, *GetLongLinkRequest) (*GetLongLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLongLink not implemented")
}

// UnsafeZipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZipServer will
// result in compilation errors.
type UnsafeZipServer interface {
	mustEmbedUnimplementedZipServer()
}

func RegisterZipServer(s grpc.ServiceRegistrar, srv ZipServer) {
	s.RegisterService(&Zip_ServiceDesc, srv)
}

func _Zip_GenerateShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateShortLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZipServer).GenerateShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zip_GenerateShortLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZipServer).GenerateShortLink(ctx, req.(*GenerateShortLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zip_GetLongLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLongLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZipServer).GetLongLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zip_GetLongLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZipServer).GetLongLink(ctx, req.(*GetLongLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Zip_ServiceDesc is the grpc.ServiceDesc for Zip service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zip_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.zip.zip",
	HandlerType: (*ZipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateShortLink",
			Handler:    _Zip_GenerateShortLink_Handler,
		},
		{
			MethodName: "GetLongLink",
			Handler:    _Zip_GetLongLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/zip/zip.proto",
}
